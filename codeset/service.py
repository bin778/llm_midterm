# -*- coding: utf-8 -*-
"""Service.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J4tPjVw0sIyzEooc_ZdCfIP264lmeY5U
"""

# !pip install uvicorn fastapi
# !pip install nest-asyncio pyngrok

# 서버 관리용 fastapi 의존 라이브러리
import uvicorn
# fast api 라이브러리
from fastapi import FastAPI
# 머신러닝 모델 관리용 라이브러리
import pickle
# 데이터프레임 및 수 처리 라이브러리
import pandas as pd
import numpy as np
# 인터페이스 데이터 관리를 위한 라이브러리
from pydantic import BaseModel

from fastapi.middleware.cors import CORSMiddleware
origins = ["*"]

app = FastAPI(title="ML API")

# CORS 미들웨어 추가
app.add_middleware(
  CORSMiddleware,
  allow_origins=["*"], # 모든 origin 허용
  allow_credentials=True,
  allow_methods=["GET", "POST", "PUT", "DELETE"],
  allow_headers=["*"],
)

class InDataset(BaseModel):
  question : str

question = "프랭크버거 원주단구점의 이 곳의 주소를 알 수 있나요?"

# 관광 KVQA 데이터(동부권)
# https://www.aihub.or.kr/aihubdata/data/view.do?currMenu=115&topMenu=100&aihubDataSe=data&dataSetSn=71607
import os, json
path1 = '../dataset/'
dir1 = os.listdir(path1)

@app.post("/predict", status_code=200)
async def predict_tf(x: InDataset):  # x.question 사용해야 함
    question = x.question  # 여기서 추출
    for dt in dir1:
        if dt == '.ipynb_checkpoints': continue
        path2 = os.path.join(path1, dt)

        for fi in os.listdir(path2):
            json_file = os.path.join(path2, fi)
            with open(json_file, 'r', encoding='utf-8') as f:
                try:
                    json_data = json.load(f)
                    name = json_data['data']['place']
                    for qs in json_data['annotations']:  # ← 여기도 'qs' 안에 접근
                        full_q = f"{name.rstrip()}의 {qs['question'][0]['question']}"
                        if question == full_q:
                            return {"result": qs['question'][0]['answer']}
                except json.JSONDecodeError:
                    print(f"{json_file} 불러오기 실패!!")

    return {"result": "답변을 찾을 수 없습니다."}

@app.get('/')
async def root():
  return {"message": "online"}

import nest_asyncio
from pyngrok import ngrok
import uvicorn
from dotenv import load_dotenv
load_dotenv()

auth_token = os.getenv('NGROKKEY')
ngrok.set_auth_token(auth_token)
ngrokTunnel = ngrok.connect(2222)
print("공용 URL", ngrokTunnel.public_url)
nest_asyncio.apply()
uvicorn.run(app, port=2222)

